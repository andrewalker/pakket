<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
  <title>perl pakkets build status</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
      padding: 0 25px 25px 25px;
    }
    table {
      border-collapse: collapse;
      font-size: 0.85em;
    }
    table, th, td {
      border: 1px solid black;
    }
    td {
      padding: 10px;
      text-align: center;
      font-weight: bold;
    }
    tbody td {
      background: #6f6;
      word-wrap: break-word;
      width: 150px;
      padding: 5px;
    }
    .name {
      background: transparent;
      text-align: left;
      padding-left: 25px;
      width: 300px;
      font-weight: normal;
    }
    .missing {
      background: #ff6;
    }
    .options-panel {
      font-size: 0.9em;
      margin-bottom: 20px;
    }
    .hidden {
      visibility: hidden;
    }
  </style>
</head>
<body>
  <h2 class="hidden">perl pakket build status</h2>
  <div class="hidden options-panel">
    <input type="checkbox" name="only-problematic" id="only-problematic" value="1" />
    <label for="only-problematic">Show only problematic</label>
  </div>
  <table>
    <thead id="thead">
    </thead>
    <tbody id="tbody">
    </tbody>
  </table>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script>
    (function(){
      const CSS_CLASS_BAD_PAKKET = 'bad';
      const CSS_CLASS_FINE_PAKKET = 'ok';
      const CSS_CLASS_MISSING_PAKKET = 'missing';

      // actual rendering packages call
      renderPackages();

      function renderPackages() {
        const URL_FETCH_PAKKETS = '/all_packages';
        const localStorageKey = 'pakkets';
        // first checking if data is available at localStorage
        let pakketsInLocalStorage = localStorage.getItem(localStorageKey);
        if (pakketsInLocalStorage) {
          renderUI(JSON.parse(pakketsInLocalStorage));
          // updating cache if required
          $.ajax(URL_FETCH_PAKKETS).done(function(data) {
            const cachedPakketObject = JSON.stringify(data);
            if (pakketsInLocalStorage !== cachedPakketObject) {
              localStorage.setItem(localStorageKey, cachedPakketObject);
              // re-rendering UI
              renderUI(data);
            }
          });
        } else {
          // doing a plain ajax call
          $.ajax(URL_FETCH_PAKKETS).done(function(data) {
            renderUI(data);
            // and cache data to localstorage
            localStorage.setItem(localStorageKey, JSON.stringify(data));
          });
        }
      };

      function renderUI(data) {
        // taking pakket #1 and getting columns metadata from it
        const keys = Object.keys(data[0][1]);
        const desiredOrder = ['spec', 'source', '5.24.0', '5.24.3', '5.26.2'];
        let finalOrder = desiredOrder;
        let OSmetadata;
        keys.forEach((key) => {
          if (desiredOrder.indexOf(key) === -1) {
            finalOrder.push(key);
          }
          // getting OS metadata from first perl version prop
          if (strIsPerlVersion(key)){
            OSmetadata = Object.keys(data[0][1][key]).sort();
          }
        });

        let tableHead = '<tr>';
        tableHead += '<td class="name" rowspan="2">module name</td>';
        desiredOrder.forEach((column) => {
          // calculating colspan and rowspan
          let colspan = 1;
          let rowspan = 1;
          if (strIsPerlVersion(column)){
            colspan = 2;
          } else {
            rowspan = 2;
          }
          tableHead += `<td colspan="${colspan}" rowspan="${rowspan}">${column}</td>`;
        });
        tableHead += '</tr><tr>';
        desiredOrder.forEach((column) => {
          if (!strIsPerlVersion(column)) return;
          OSmetadata.forEach((os) => {
            tableHead += `<td>${os}</td>`;
          });
        });
        tableHead += '</tr>';
        // showing page title
        $('.hidden').removeClass('hidden');
        // required on re-render
        $('#thead').empty();
        $('#thead').append(tableHead);

        // calculating and rendering body
        let tableBody = '';
        data.forEach((pakket) => {
          let problematicPakket = false;
          let tableRow = `<td class="name">${pakket[0]}</td>`;
          const renderQueue = [];
          desiredOrder.forEach((column) => {
            if (strIsPerlVersion(column)){
              OSmetadata.forEach((os) => {
                renderQueue.push(pakket[1][column][os] ? '+' : '-');
              });
            } else {
                renderQueue.push(pakket[1][column] ? '+' : '-');
            }
          });
          // rendering queue
          renderQueue.forEach((val) => {
            tableRow += `<td ${(val === '+' ? '' : ('class="' + CSS_CLASS_MISSING_PAKKET + '"'))}>${val}</td>`;
          });
          // figuring out if pakket is problematic + reflecting in <tr> css class
          problematicPakket = !!renderQueue.filter(val => val === '-').length;
          tableBody += `<tr class="${problematicPakket ? CSS_CLASS_BAD_PAKKET : CSS_CLASS_FINE_PAKKET}">${tableRow}</tr>`;
        });
        // required on re-render
        $('#tbody').empty();
        $('#tbody').append(`${tableBody}`);
      }

      $('#only-problematic').on('change', function(){
        if ($(this).is(':checked')) {
          $(`.${CSS_CLASS_FINE_PAKKET}`).hide();
        } else {
          $(`.${CSS_CLASS_FINE_PAKKET}`).show();
        }
      });

      // helper functions
      function strIsPerlVersion(str) {
        return !isNaN(parseInt(str));
      }

    })();
  </script>
</body>
</html>
